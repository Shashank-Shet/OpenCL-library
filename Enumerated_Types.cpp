#pragma once
#include<iostream>
#include<map>
#include<string.h>
#ifdef __APPLE__
#include<OpenCL/opencl.h>
#else
#include<CL/cl.h>
#endif


std::map<int, std::string> errors
{
  std::make_pair(CL_BUILD_PROGRAM_FAILURE, "CL_BUILD_PROGRAM_FAILURE"),
  std::make_pair(CL_COMPILER_NOT_AVAILABLE, "CL_COMPILER_NOT_AVAILABLE"),
  std::make_pair(CL_DEVICE_NOT_AVAILABLE, "CL_DEVICE_NOT_AVAILABLE"),
  std::make_pair(CL_DEVICE_NOT_FOUND, "CL_DEVICE_NOT_FOUND"),
  std::make_pair(CL_IMAGE_FORMAT_MISMATCH, "CL_IMAGE_FORMAT_MISMATCH"),
  std::make_pair(CL_IMAGE_FORMAT_NOT_SUPPORTED, "CL_IMAGE_FORMAT_NOT_SUPPORTED"),
  std::make_pair(CL_INVALID_ARG_INDEX, "CL_INVALID_ARG_INDEX"),
  std::make_pair(CL_INVALID_ARG_SIZE, "CL_INVALID_ARG_SIZE"),
  std::make_pair(CL_INVALID_ARG_VALUE, "CL_INVALID_ARG_VALUE"),
  std::make_pair(CL_INVALID_BINARY, "CL_INVALID_BINARY"),
  std::make_pair(CL_INVALID_BUFFER_SIZE, "CL_INVALID_BUFFER_SIZE"),
  std::make_pair(CL_INVALID_BUILD_OPTIONS, "CL_INVALID_BUILD_OPTIONS"),
  std::make_pair(CL_INVALID_COMMAND_QUEUE, "CL_INVALID_COMMAND_QUEUE"),
  std::make_pair(CL_INVALID_CONTEXT, "CL_INVALID_CONTEXT"),
  std::make_pair(CL_INVALID_DEVICE, "CL_INVALID_DEVICE"),
  std::make_pair(CL_INVALID_DEVICE_TYPE, "CL_INVALID_DEVICE_TYPE"),
  std::make_pair(CL_INVALID_EVENT, "CL_INVALID_EVENT"),
  std::make_pair(CL_INVALID_EVENT_WAIT_LIST, "CL_INVALID_EVENT_WAIT_LIST"),
  std::make_pair(CL_INVALID_GL_OBJECT, "CL_INVALID_GL_OBJECT"),
  std::make_pair(CL_INVALID_GLOBAL_OFFSET, "CL_INVALID_GLOBAL_OFFSET"),
  std::make_pair(CL_INVALID_HOST_PTR, "CL_INVALID_HOST_PTR"),
  std::make_pair(CL_INVALID_IMAGE_FORMAT_DESCRIPTOR, "CL_INVALID_IMAGE_FORMAT_DESCRIPTOR"),
  std::make_pair(CL_INVALID_IMAGE_SIZE, "CL_INVALID_IMAGE_SIZE"),
  std::make_pair(CL_INVALID_KERNEL_NAME, "CL_INVALID_KERNEL_NAME"),
  std::make_pair(CL_INVALID_KERNEL, "CL_INVALID_KERNEL"),
  std::make_pair(CL_INVALID_KERNEL_ARGS, "CL_INVALID_KERNEL_ARGS"),
  std::make_pair(CL_INVALID_KERNEL_DEFINITION, "CL_INVALID_KERNEL_DEFINITION"),
  std::make_pair(CL_INVALID_MEM_OBJECT, "CL_INVALID_MEM_OBJECT"),
  std::make_pair(CL_INVALID_OPERATION, "CL_INVALID_OPERATION"),
  std::make_pair(CL_INVALID_PLATFORM, "CL_INVALID_PLATFORM"),
  std::make_pair(CL_INVALID_PROGRAM, "CL_INVALID_PROGRAM"),
  std::make_pair(CL_INVALID_PROGRAM_EXECUTABLE, "CL_INVALID_PROGRAM_EXECUTABLE"),
  std::make_pair(CL_INVALID_QUEUE_PROPERTIES, "CL_INVALID_QUEUE_PROPERTIES"),
  std::make_pair(CL_INVALID_SAMPLER, "CL_INVALID_SAMPLER"),
  std::make_pair(CL_INVALID_VALUE, "CL_INVALID_VALUE"),
  std::make_pair(CL_INVALID_WORK_DIMENSION, "CL_INVALID_WORK_DIMENSION"),
  std::make_pair(CL_INVALID_WORK_GROUP_SIZE, "CL_INVALID_WORK_GROUP_SIZE"),
  std::make_pair(CL_INVALID_WORK_ITEM_SIZE, "CL_INVALID_WORK_ITEM_SIZE"),
  std::make_pair(CL_MAP_FAILURE, "CL_MAP_FAILURE"),
  std::make_pair(CL_MEM_OBJECT_ALLOCATION_FAILURE, "CL_MEM_OBJECT_ALLOCATION_FAILURE"),
  std::make_pair(CL_MEM_COPY_OVERLAP, "CL_MEM_COPY_OVERLAP"),
  std::make_pair(CL_OUT_OF_HOST_MEMORY, "CL_OUT_OF_HOST_MEMORY"),
  std::make_pair(CL_OUT_OF_RESOURCES, "CL_OUT_OF_RESOURCES"),
  std::make_pair(CL_PROFILING_INFO_NOT_AVAILABLE, "CL_PROFILING_INFO_NOT_AVAILABLE")
};

std::map<int, std::string> addr_modes
{
  std::make_pair(CL_ADDRESS_NONE, "ADDRESS_NONE"),
  std::make_pair(CL_ADDRESS_CLAMP_TO_EDGE, "ADDRESS_CLAMP_TO_EDGE"),
  std::make_pair(CL_ADDRESS_CLAMP, "ADDRESS_CLAMP"),
  std::make_pair(CL_ADDRESS_REPEAT, "ADDRESS_REPEAT"),
  std::make_pair(CL_ADDRESS_MIRRORED_REPEAT, "ADDRESS_MIRRORED_REPEAT")
};


std::map<int, std::string> build_status
{
  std::make_pair(CL_BUILD_SUCCESS, "BUILD_SUCCESS"),
  std::make_pair(CL_BUILD_NONE, "BUILD_NONE"),
  std::make_pair(CL_BUILD_ERROR, "BUILD_ERROR"),
  std::make_pair(CL_BUILD_IN_PROGRESS, "BUILD_IN_PROGRESS")
};

std::map<int, std::string> channel_order
{
  std::make_pair(CL_A, "A"),
  std::make_pair(CL_R, "R"),
  std::make_pair(CL_RG, "RG"),
  std::make_pair(CL_RA, "RA"),
  std::make_pair(CL_RGB, "RGB"),
  std::make_pair(CL_RGBA, "RGBA"),
  std::make_pair(CL_BGRA, "BGRA"),
  std::make_pair(CL_ARGB, "ARGB"),
  std::make_pair(CL_INTENSITY, "INTENSITY"),
  std::make_pair(CL_LUMINANCE, "LUMINANCE"),
  std::make_pair(CL_Rx, "Rx"),
  std::make_pair(CL_RGx, "RGx"),
  std::make_pair(CL_RGBx, "RGBx")
};

std::map<int, std::string> channel_type
{
  std::make_pair(CL_SNORM_INT8, "SNORM_INT8"),
  std::make_pair(CL_SNORM_INT16, "SNORM_INT16"),
  std::make_pair(CL_UNORM_INT8, "UNORM_INT8"),
  std::make_pair(CL_UNORM_INT16, "UNORM_INT16"),
  std::make_pair(CL_UNORM_SHORT_565, "UNORM_SHORT_565"),
  std::make_pair(CL_UNORM_SHORT_555, "UNORM_SHORT_555"),
  std::make_pair(CL_UNORM_INT_101010, "UNORM_INT_101010"),
  std::make_pair(CL_SIGNED_INT8, "SIGNED_INT8"),
  std::make_pair(CL_SIGNED_INT16, "SIGNED_INT16"),
  std::make_pair(CL_SIGNED_INT32, "SIGNED_INT32"),
  std::make_pair(CL_UNSIGNED_INT8, "UNSIGNED_INT8"),
  std::make_pair(CL_UNSIGNED_INT16, "UNSIGNED_INT16"),
  std::make_pair(CL_UNSIGNED_INT32, "UNSIGNED_INT32"),
  std::make_pair(CL_HALF_FLOAT, "HALF_FLOAT"),
  std::make_pair(CL_FLOAT, "FLOAT")
};

std::map<int, std::string> cmd_q_info
{
  std::make_pair(CL_QUEUE_CONTEXT, "QUEUE_CONTEXT"),
  std::make_pair(CL_QUEUE_DEVICE, "QUEUE_DEVICE"),
  std::make_pair(CL_QUEUE_REFERENCE_COUNT, "QUEUE_REFERENCE_COUNT"),
  std::make_pair(CL_QUEUE_PROPERTIES, "QUEUE_PROPERTIES")
};

std::map<int, std::string> cmd_type
{
  std::make_pair(CL_COMMAND_NDRANGE_KERNEL, "COMMAND_NDRANGE_KERNEL"),
  std::make_pair(CL_COMMAND_TASK, "COMMAND_TASK"),
  std::make_pair(CL_COMMAND_NATIVE_KERNEL, "COMMAND_NATIVE_KERNEL"),
  std::make_pair(CL_COMMAND_READ_BUFFER, "COMMAND_READ_BUFFER"),
  std::make_pair(CL_COMMAND_WRITE_BUFFER, "COMMAND_WRITE_BUFFER"),
  std::make_pair(CL_COMMAND_COPY_BUFFER, "COMMAND_COPY_BUFFER"),
  std::make_pair(CL_COMMAND_READ_IMAGE, "COMMAND_READ_IMAGE"),
  std::make_pair(CL_COMMAND_WRITE_IMAGE, "COMMAND_WRITE_IMAGE"),
  std::make_pair(CL_COMMAND_COPY_IMAGE, "COMMAND_COPY_IMAGE"),
  std::make_pair(CL_COMMAND_COPY_IMAGE_TO_BUFFER, "COMMAND_COPY_IMAGE_TO_BUFFER"),
  std::make_pair(CL_COMMAND_COPY_BUFFER_TO_IMAGE, "COMMAND_COPY_BUFFER_TO_IMAGE"),
  std::make_pair(CL_COMMAND_MAP_BUFFER, "COMMAND_MAP_BUFFER"),
  std::make_pair(CL_COMMAND_MAP_IMAGE, "COMMAND_MAP_IMAGE"),
  std::make_pair(CL_COMMAND_UNMAP_MEM_OBJECT, "COMMAND_UNMAP_MEM_OBJECT"),
  std::make_pair(CL_COMMAND_MARKER, "COMMAND_MARKER"),
  std::make_pair(CL_COMMAND_ACQUIRE_GL_OBJECTS, "COMMAND_ACQUIRE_GL_OBJECTS"),
  std::make_pair(CL_COMMAND_RELEASE_GL_OBJECTS, "COMMAND_RELEASE_GL_OBJECTS"),
  std::make_pair(CL_COMMAND_READ_BUFFER_RECT, "COMMAND_READ_BUFFER_RECT"),
  std::make_pair(CL_COMMAND_WRITE_BUFFER_RECT, "COMMAND_WRITE_BUFFER_RECT"),
  std::make_pair(CL_COMMAND_COPY_BUFFER_RECT, "COMMAND_COPY_BUFFER_RECT"),
  std::make_pair(CL_COMMAND_USER, "COMMAND_USER"),
  std::make_pair(CL_COMMAND_BARRIER, "COMMAND_BARRIER"),
  std::make_pair(CL_COMMAND_MIGRATE_MEM_OBJECTS, "COMMAND_MIGRATE_MEM_OBJECTS"),
  std::make_pair(CL_COMMAND_FILL_BUFFER, "COMMAND_FILL_BUFFER"),
  std::make_pair(CL_COMMAND_FILL_IMAGE, "COMMAND_FILL_IMAGE")
};
  // cmd_type[CL_COMMAND_ACQUIRE_D3D10_OBJECTS_KHR] = "COMMAND_ACQUIRE_D3D10_OBJECTS_KHR";
  // cmd_type[CL_COMMAND_RELEASE_D3D10_OBJECTS_KHR] = "COMMAND_RELEASE_D3D10_OBJECTS_KHR";
  // cmd_type[CL_COMMAND_ACQUIRE_D3D11_OBJECTS_KHR] = "COMMAND_ACQUIRE_D3D11_OBJECTS_KHR";
  // cmd_type[CL_COMMAND_RELEASE_D3D11_OBJECTS_KHR] = "COMMAND_RELEASE_D3D11_OBJECTS_KHR";
  // cmd_type[CL_COMMAND_ACQUIRE_DX9_MEDIA_SURFACES_KHR] = "COMMAND_ACQUIRE_DX9_MEDIA_SURFACES_KHR";
  // cmd_type[CL_COMMAND_RELEASE_DX9_MEDIA_SURFACES_KHR] = "COMMAND_RELEASE_DX9_MEDIA_SURFACES_KHR";
  //
  // std::map<cl_context_info, std::string> context_info;
  // context_info[CL_CONTEXT_REFERENCE_COUNT] = "CONTEXT_REFERENCE_COUNT";
  // context_info[CL_CONTEXT_DEVICES] = "CONTEXT_DEVICES";
  // context_info[CL_CONTEXT_PROPERTIES] = "CONTEXT_PROPERTIES";
  // context_info[CL_CONTEXT_NUM_DEVICES] = "CONTEXT_NUM_DEVICES";
  // context_info[CL_CONTEXT_D3D10_DEVICE_KHR] = "CONTEXT_D3D10_DEVICE_KHR";
  // context_info[CL_CONTEXT_D3D10_PREFER_SHARED_RESOURCES_KHR] = "CONTEXT_D3D10_PREFER_SHARED_RESOURCES_KHR";
  // context_info[CL_CONTEXT_D3D11_DEVICE_KHR] = "CONTEXT_D3D11_DEVICE_KHR";
  // context_info[CL_CONTEXT_D3D11_PREFER_SHARED_RESOURCES_KHR] = "CONTEXT_D3D11_PREFER_SHARED_RESOURCES_KHR";
  // context_info[CL_CONTEXT_D3D9_DEVICE_KHR] = "CONTEXT_D3D9_DEVICE_KHR";
  // context_info[CL_CONTEXT_D3D9EX_DEVICE_KHR] = "CONTEXT_D3D9EX_DEVICE_KHR";
  // context_info[CL_CONTEXT_DXVA_DEVICE_KHR] = "CONTEXT_DXVA_DEVICE_KHR";
  // context_info[CL_GL_CONTEXT_KHR] = "GL_CONTEXT_KHR";
  // context_info[CL_EGL_DISPLAY_KHR] = "EGL_DISPLAY_KHR";
  // context_info[CL_GLX_DISPLAY_KHR] = "GLX_DISPLAY_KHR";
  // context_info[CL_WGL_HDC_KHR] = "WGL_HDC_KHR";
  // context_info[CL_CGL_SHAREGROUP_KHR] = "CGL_SHAREGROUP_KHR";

  // std::map<cl_context_properties, std::string> context_properties;
  // context_properties[CL_CONTEXT_PLATFORM] = "CONTEXT_PLATFORM";
  // context_properties[CL_CONTEXT_INTEROP_USER_SYNC] = "CONTEXT_INTEROP_USER_SYNC";
  // context_properties[CL_GL_CONTEXT_KHR] = "GL_CONTEXT_KHR";
  // context_properties[CL_EGL_DISPLAY_KHR] = "EGL_DISPLAY_KHR";
  // context_properties[CL_GLX_DISPLAY_KHR] = "GLX_DISPLAY_KHR";
  // context_properties[CL_WGL_HDC_KHR] = "WGL_HDC_KHR";
  // context_properties[CL_CGL_SHAREGROUP_KHR] = "CGL_SHAREGROUP_KHR";
  //
  // std::map<cl_device_info, std::string> device_info
  // device_info[CL_DEVICE_TYPE] = "DEVICE_TYPE";
  // device_info[CL_DEVICE_VENDOR_ID] = "DEVICE_VENDOR_ID";
  // device_info[CL_DEVICE_MAX_COMPUTE_UNITS] = "DEVICE_MAX_COMPUTE_UNITS";
  // device_info[CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS] = "DEVICE_MAX_WORK_ITEM_DIMENSIONS";
  // device_info[CL_DEVICE_MAX_WORK_GROUP_SIZE] = "DEVICE_MAX_WORK_GROUP_SIZE";
  // device_info[CL_DEVICE_MAX_WORK_ITEM_SIZES] = "DEVICE_MAX_WORK_ITEM_SIZES";
  // device_info[CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR] = "DEVICE_PREFERRED_VECTOR_WIDTH_CHAR";
  // device_info[CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT] = "DEVICE_PREFERRED_VECTOR_WIDTH_SHORT";
  // device_info[CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT] = "DEVICE_PREFERRED_VECTOR_WIDTH_INT";
  // device_info[CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG] = "DEVICE_PREFERRED_VECTOR_WIDTH_LONG";
  // device_info[CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT] = "DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT";
  // device_info[CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE] = "DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE";
  // device_info[CL_DEVICE_MAX_CLOCK_FREQUENCY] = "DEVICE_MAX_CLOCK_FREQUENCY";
  // device_info[CL_DEVICE_ADDRESS_BITS] = "DEVICE_ADDRESS_BITS";
  // device_info[CL_DEVICE_MAX_READ_IMAGE_ARGS] = "DEVICE_MAX_READ_IMAGE_ARGS";
  // device_info[CL_DEVICE_MAX_WRITE_IMAGE_ARGS] = "DEVICE_MAX_WRITE_IMAGE_ARGS";
  // device_info[CL_DEVICE_MAX_MEM_ALLOC_SIZE] = "DEVICE_MAX_MEM_ALLOC_SIZE";
  // device_info[CL_DEVICE_IMAGE2D_MAX_WIDTH] = "DEVICE_IMAGE2D_MAX_WIDTH";
  // device_info[CL_DEVICE_IMAGE2D_MAX_HEIGHT] = "DEVICE_IMAGE2D_MAX_HEIGHT";
  // device_info[CL_DEVICE_IMAGE3D_MAX_WIDTH] = "DEVICE_IMAGE3D_MAX_WIDTH";
  // device_info[CL_DEVICE_IMAGE3D_MAX_HEIGHT] = "DEVICE_IMAGE3D_MAX_HEIGHT";
  // device_info[CL_DEVICE_IMAGE3D_MAX_DEPTH] = "DEVICE_IMAGE3D_MAX_DEPTH";
  // device_info[CL_DEVICE_IMAGE_SUPPORT] = "DEVICE_IMAGE_SUPPORT";
  // device_info[CL_DEVICE_MAX_PARAMETER_SIZE] = "DEVICE_MAX_PARAMETER_SIZE";
  // device_info[CL_DEVICE_MAX_SAMPLERS] = "DEVICE_MAX_SAMPLERS";
  // device_info[CL_DEVICE_MEM_BASE_ADDR_ALIGN] = "DEVICE_MEM_BASE_ADDR_ALIGN";
  // device_info[CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE] = "DEVICE_MIN_DATA_TYPE_ALIGN_SIZE";
  // device_info[CL_DEVICE_SINGLE_FP_CONFIG] = "DEVICE_SINGLE_FP_CONFIG";
  // device_info[CL_DEVICE_GLOBAL_MEM_CACHE_TYPE] = "DEVICE_GLOBAL_MEM_CACHE_TYPE";
  // device_info[CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE] = "DEVICE_GLOBAL_MEM_CACHELINE_SIZE";
  // device_info[CL_DEVICE_GLOBAL_MEM_CACHE_SIZE] = "DEVICE_GLOBAL_MEM_CACHE_SIZE";
  // device_info[CL_DEVICE_GLOBAL_MEM_SIZE] = "DEVICE_GLOBAL_MEM_SIZE";
  // device_info[CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE] = "DEVICE_MAX_CONSTANT_BUFFER_SIZE";
  // device_info[CL_DEVICE_MAX_CONSTANT_ARGS] = "DEVICE_MAX_CONSTANT_ARGS";
  // device_info[CL_DEVICE_LOCAL_MEM_TYPE] = "DEVICE_LOCAL_MEM_TYPE";
  // device_info[CL_DEVICE_LOCAL_MEM_SIZE] = "DEVICE_LOCAL_MEM_SIZE";
  // device_info[CL_DEVICE_ERROR_CORRECTION_SUPPORT] = "DEVICE_ERROR_CORRECTION_SUPPORT";
  // device_info[CL_DEVICE_PROFILING_TIMER_RESOLUTION] = "DEVICE_PROFILING_TIMER_RESOLUTION";
  // device_info[CL_DEVICE_ENDIAN_LITTLE] = "DEVICE_ENDIAN_LITTLE";
  // device_info[CL_DEVICE_AVAILABLE] = "DEVICE_AVAILABLE";
  // device_info[CL_DEVICE_COMPILER_AVAILABLE] = "DEVICE_COMPILER_AVAILABLE";
  // device_info[CL_DEVICE_EXECUTION_CAPABILITIES] = "DEVICE_EXECUTION_CAPABILITIES";
  // device_info[CL_DEVICE_QUEUE_PROPERTIES] = "DEVICE_QUEUE_PROPERTIES";
  // device_info[CL_DEVICE_NAME] = "DEVICE_NAME";
  // device_info[CL_DEVICE_VENDOR] = "DEVICE_VENDOR";
  // device_info[CL_DRIVER_VERSION] = "DRIVER_VERSION";
  // device_info[CL_DEVICE_PROFILE] = "DEVICE_PROFILE";
  // device_info[CL_DEVICE_VERSION] = "DEVICE_VERSION";
  // device_info[CL_DEVICE_EXTENSIONS] = "DEVICE_EXTENSIONS";
  // device_info[CL_DEVICE_PLATFORM] = "DEVICE_PLATFORM";
  // device_info[CL_DEVICE_DOUBLE_FP_CONFIG] = "DEVICE_DOUBLE_FP_CONFIG";
  // device_info[CL_DEVICE_PREFERRED_VECTOR_WIDTH_HALF] = "DEVICE_PREFERRED_VECTOR_WIDTH_HALF";
  // device_info[CL_DEVICE_HOST_UNIFIED_MEMORY] = "DEVICE_HOST_UNIFIED_MEMORY";
  // device_info[CL_DEVICE_NATIVE_VECTOR_WIDTH_CHAR] = "DEVICE_NATIVE_VECTOR_WIDTH_CHAR";
  // device_info[CL_DEVICE_NATIVE_VECTOR_WIDTH_SHORT] = "DEVICE_NATIVE_VECTOR_WIDTH_SHORT";
  // device_info[CL_DEVICE_NATIVE_VECTOR_WIDTH_INT] = "DEVICE_NATIVE_VECTOR_WIDTH_INT";
  // device_info[CL_DEVICE_NATIVE_VECTOR_WIDTH_LONG] = "DEVICE_NATIVE_VECTOR_WIDTH_LONG";
  // device_info[CL_DEVICE_NATIVE_VECTOR_WIDTH_FLOAT] = "DEVICE_NATIVE_VECTOR_WIDTH_FLOAT";
  // device_info[CL_DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE] = "DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE";
  // device_info[CL_DEVICE_NATIVE_VECTOR_WIDTH_HALF] = "DEVICE_NATIVE_VECTOR_WIDTH_HALF";
  // device_info[CL_DEVICE_OPENCL_C_VERSION] = "OPENCL_C_VERSION";
  // device_info[CL_DEVICE_LINKER_AVAILABLE] = "DEVICE_LINKER_AVAILABLE";
  // device_info[CL_DEVICE_BUILT_IN_KERNELS] = "DEVICE_BUILT_IN_KERNELS";
  // device_info[CL_DEVICE_IMAGE_MAX_BUFFER_SIZE] = "DEVICE_IMAGE_MAX_BUFFER_SIZE";
  // device_info[CL_DEVICE_IMAGE_MAX_ARRAY_SIZE] = "DEVICE_IMAGE_MAX_ARRAY_SIZE";
  // device_info[CL_DEVICE_PARENT_DEVICE] = "DEVICE_PARENT_DEVICE";
  // device_info[CL_DEVICE_PARTITION_MAX_SUB_DEVICES] = "DEVICE_PARTITION_MAX_SUB_DEVICES";
  // device_info[CL_DEVICE_PARTITION_PROPERTIES] = "DEVICE_PARTITION_PROPERTIES";
  // device_info[CL_DEVICE_PARTITION_AFFINITY_DOMAIN] = "DEVICE_PARTITION_AFFINITY_DOMAIN";
  // device_info[CL_DEVICE_PARTITION_TYPE] = "DEVICE_PARTITION_TYPE";
  // device_info[CL_DEVICE_REFERENCE_COUNT] = "DEVICE_REFERENCE_COUNT";
  // device_info[CL_DEVICE_PREFERRED_INTEROP_USER_SYNC] = "DEVICE_PREFERRED_INTEROP_USER_SYNC";
  // device_info[CL_DEVICE_PRINTF_BUFFER_SIZE] = "DEVICE_PRINTF_BUFFER_SIZE";

  // std::map<cl_device_CL_GLOBAL
  // CL_LOCAL
  // CL_NONE
  //
  // CL_NONE
  // CL_READ_ONLY_CACHE
  // CL_READ_WRITE_CACHE

  // CL_DEVICE_PARTITION_EQUALLY
  // CL_DEVICE_PARTITION_BY_COUNTS
  // CL_DEVICE_PARTITION_BY_COUNTS_LIST_END
  // CL_DEVICE_PARTITION_BY_AFFINITY_DOMAIN

  // std::map<cl_device_type, std::string> device_type;
std::map<int, std::string> device_type
{
  std::make_pair(CL_DEVICE_TYPE_DEFAULT, "CL_DEVICE_TYPE_DEFAULT"),
  std::make_pair(CL_DEVICE_TYPE_CPU, "CL_DEVICE_TYPE_CPU"),
  std::make_pair(CL_DEVICE_TYPE_GPU, "CL_DEVICE_TYPE_GPU"),
  std::make_pair(CL_DEVICE_TYPE_ACCELERATOR, "CL_DEVICE_TYPE_ACCELERATOR"),
  std::make_pair(CL_DEVICE_TYPE_CUSTOM, "CL_DEVICE_TYPE_CUSTOM"),
  std::make_pair(CL_DEVICE_TYPE_ALL, "CL_DEVICE_TYPE_ALL")
};

std::map<int, std::string> event_info
{
  std::make_pair(CL_EVENT_COMMAND_QUEUE, "CL_EVENT_COMMAND_QUEUE"),
  std::make_pair(CL_EVENT_COMMAND_TYPE, "CL_EVENT_COMMAND_TYPE"),
  std::make_pair(CL_EVENT_REFERENCE_COUNT, "CL_EVENT_REFERENCE_COUNT"),
  std::make_pair(CL_EVENT_COMMAND_EXECUTION_STATUS, "CL_EVENT_COMMAND_EXECUTION_STATUS"),
  std::make_pair(CL_EVENT_CONTEXT, "CL_EVENT_CONTEXT")
};
std::map<int, std::string> kernel_arg_access_qualifier
{
  std::make_pair(CL_KERNEL_ARG_ACCESS_READ_ONLY, "CL_KERNEL_ARG_ACCESS_READ_ONLY"),
  std::make_pair(CL_KERNEL_ARG_ACCESS_WRITE_ONLY, "CL_KERNEL_ARG_ACCESS_WRITE_ONLY"),
  std::make_pair(CL_KERNEL_ARG_ACCESS_READ_WRITE, "CL_KERNEL_ARG_ACCESS_READ_WRITE"),
  std::make_pair(CL_KERNEL_ARG_ACCESS_NONE, "CL_KERNEL_ARG_ACCESS_NONE")
};

std::map<int, std::string> kernel_arg_info
{
  std::make_pair(CL_KERNEL_ARG_ADDRESS_QUALIFIER, "CL_KERNEL_ARG_ADDRESS_QUALIFIER"),
  std::make_pair(CL_KERNEL_ARG_ACCESS_QUALIFIER, "CL_KERNEL_ARG_ACCESS_QUALIFIER"),
  std::make_pair(CL_KERNEL_ARG_TYPE_NAME, "CL_KERNEL_ARG_TYPE_NAME"),
  std::make_pair(CL_KERNEL_ARG_NAME, "CL_KERNEL_ARG_NAME")
};

std::map<int, std::string> kernel_info
{
  std::make_pair(CL_KERNEL_FUNCTION_NAME, "CL_KERNEL_FUNCTION_NAME"),
  std::make_pair(CL_KERNEL_NUM_ARGS, "CL_KERNEL_NUM_ARGS"),
  std::make_pair(CL_KERNEL_REFERENCE_COUNT, "CL_KERNEL_REFERENCE_COUNT"),
  std::make_pair(CL_KERNEL_CONTEXT, "CL_KERNEL_CONTEXT"),
  std::make_pair(CL_KERNEL_PROGRAM, "CL_KERNEL_PROGRAM"),
  std::make_pair(CL_KERNEL_ATTRIBUTES, "CL_KERNEL_ATTRIBUTES")
};

std::map<int, std::string> kernel_work_group_info
{
  std::make_pair(CL_KERNEL_WORK_GROUP_SIZE, "CL_KERNEL_WORK_GROUP_SIZE"),
  std::make_pair(CL_KERNEL_COMPILE_WORK_GROUP_SIZE, "CL_KERNEL_COMPILE_WORK_GROUP_SIZE"),
  std::make_pair(CL_KERNEL_LOCAL_MEM_SIZE, "CL_KERNEL_LOCAL_MEM_SIZE"),
  std::make_pair(CL_KERNEL_PREFERRED_WORK_GROUP_SIZE_MULTIPLE, "CL_KERNEL_PREFERRED_WORK_GROUP_SIZE_MULTIPLE"),
  std::make_pair(CL_KERNEL_PRIVATE_MEM_SIZE, "CL_KERNEL_PRIVATE_MEM_SIZE"),
  std::make_pair(CL_KERNEL_GLOBAL_WORK_SIZE, "CL_KERNEL_GLOBAL_WORK_SIZE")
};

std::map<int, std::string> mem_flags
{
  std::make_pair(CL_MEM_READ_WRITE, "CL_MEM_READ_WRITE"),
  std::make_pair(CL_MEM_WRITE_ONLY, "CL_MEM_WRITE_ONLY"),
  std::make_pair(CL_MEM_READ_ONLY, "CL_MEM_READ_ONLY"),
  std::make_pair(CL_MEM_USE_HOST_PTR, "CL_MEM_USE_HOST_PTR"),
  std::make_pair(CL_MEM_ALLOC_HOST_PTR, "CL_MEM_ALLOC_HOST_PTR"),
  std::make_pair(CL_MEM_COPY_HOST_PTR, "CL_MEM_COPY_HOST_PTR")
};

std::map<int, std::string> platform_info
{
  std::make_pair(CL_PLATFORM_PROFILE, "CL_PLATFORM_PROFILE"),
  std::make_pair(CL_PLATFORM_VERSION, "CL_PLATFORM_VERSION"),
  std::make_pair(CL_PLATFORM_NAME, "CL_PLATFORM_NAME"),
  std::make_pair(CL_PLATFORM_VENDOR, "CL_PLATFORM_VENDOR"),
  std::make_pair(CL_PLATFORM_EXTENSIONS, "CL_PLATFORM_EXTENSIONS")
};
  // platform_info[CL_PLATFORM_ICD_SUFFIX_KHR] = "CL_PLATFORM_ICD_SUFFIX_KHR";

std::map<int, std::string> build_info
{
  std::make_pair(CL_PROGRAM_BUILD_STATUS, "CL_PROGRAM_BUILD_STATUS"),
  std::make_pair(CL_PROGRAM_BUILD_OPTIONS, "CL_PROGRAM_BUILD_OPTIONS"),
  std::make_pair(CL_PROGRAM_BUILD_LOG, "CL_PROGRAM_BUILD_LOG"),
  std::make_pair(CL_PROGRAM_BINARY_TYPE, "CL_PROGRAM_BINARY_TYPE")
};

std::map<int, std::string> program_info
{
  std::make_pair(CL_PROGRAM_REFERENCE_COUNT, "CL_PROGRAM_REFERENCE_COUNT"),
  std::make_pair(CL_PROGRAM_CONTEXT, "CL_PROGRAM_CONTEXT"),
  std::make_pair(CL_PROGRAM_NUM_DEVICES, "CL_PROGRAM_NUM_DEVICES"),
  std::make_pair(CL_PROGRAM_DEVICES, "CL_PROGRAM_DEVICES"),
  std::make_pair(CL_PROGRAM_SOURCE, "CL_PROGRAM_SOURCE"),
  std::make_pair(CL_PROGRAM_BINARY_SIZES, "CL_PROGRAM_BINARY_SIZES"),
  std::make_pair(CL_PROGRAM_BINARIES, "CL_PROGRAM_BINARIES"),
  std::make_pair(CL_PROGRAM_NUM_KERNELS, "CL_PROGRAM_NUM_KERNELS"),
  std::make_pair(CL_PROGRAM_KERNEL_NAMES, "CL_PROGRAM_KERNEL_NAMES")
};
